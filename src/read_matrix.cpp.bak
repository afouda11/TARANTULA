#include <iostream>
#include <armadillo>
#include <iterator>
#include <vector>
#include <algorithm>
#include <cmath>

arma::mat read_matrix(int n, std::string Diagonal, std::string Off_Diagonal) {

    std::ifstream file(Diagonal);	
	std::istream_iterator<double> start(file), end;
	std::vector<double> diagonal(start, end);	
	
	arma::Col<double> diag(n);
	for(int i = 0; i < n; i++) {	
		diag[i] = diagonal[i];
	}

 	int	col1, col2;
	double col3;
	std::vector<int>	ivec;
	std::vector<int>	jvec;	
	std::vector<double>	val;
	std::ifstream in(Off_Diagonal);
	while(!in.eof()){
		in >> col1;
  		ivec.push_back(col1);
		in >> col2;
  		jvec.push_back(col2);
		in >> col3;
  	 	val.push_back(col3);
	}
/*	
 	std::copy(val.begin(), val.end(), 
            std::ostream_iterator<double>(std::cout, " "));
  	std::cout << std::endl;
*/

	arma::mat STATES = arma::diagmat(diag);
	size_t v  = ivec.size();
	for(int k = 0; k < v; k++) {

		STATES(ivec[k],jvec[k]) = val[k];	
		STATES(jvec[k],ivec[k]) = val[k];

	}
  
	return STATES;
  }
